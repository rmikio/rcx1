#ifndef lint
static const char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif

#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYPATCH 20140101

#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)

#define YYPREFIX "yy"

#define YYPURE 0

#line 1 "parse.y"

/*
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * The Initial Developer of this code is David Baum.
 * Portions created by David Baum are Copyright (C) 1998 David Baum.
 * All Rights Reserved.
 *
 * Portions created by John Hansen are Copyright (C) 2005 John Hansen.
 * All Rights Reserved.
 *
 */
#line 23 "parse.y"

/* prevent redefinition of YYSTYPE in parser.h*/
#define __PARSE_TAB_H

/* these classes must be defined prior to YYSTYPE*/
#include "Fragment.h"
#include "Resource.h"
#include "BlockStmt.h"
#include "Symbol.h"
#include "Expr.h"
#include "FunctionDef.h"
#include "CallStmt.h"
#include "AsmStmt.h"
#include "CaseStmt.h"
#include "DeclareStmt.h"
#include "Fragment.h"

#if __MWERKS__
#include <alloca.h>
#endif

class Clause;
class LocationNode;

#line 49 "parse.y"
#ifdef YYSTYPE
#undef  YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#endif
#ifndef YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
typedef union {
	int			fInt;
	bool		fBool;
	Resource*	fResource;
	Fragment*	fFragment;
	Stmt*		fStmt;
	BlockStmt*	fBlock;
	Symbol*		fSymbol;
	char*		fString;
	Expr*		fExpr;
	FunctionDef*	fFunction;
	CallStmt*	fCall;
	AsmStmt*	fAsmStmt;
	Field*		fField;
	CaseStmt*	fCaseStmt;
	DeclareStmt*	fDeclareStmt;
	LocationNode*	fLocation;
} YYSTYPE;
#endif /* !YYSTYPE_IS_DECLARED */
#line 69 "parse.y"

#include <stdlib.h>
#include "IfStmt.h"
#include "WhileStmt.h"
#include "AsmStmt.h"
#include "DoStmt.h"
#include "RepeatStmt.h"
#include "AssignStmt.h"
#include "TaskStmt.h"
#include "JumpStmt.h"
#include "SwitchStmt.h"
#include "ExprStmt.h"
#include "RCX_Constants.h"
#include "PreProc.h"
#include "parser.h"
#include "Program.h"
#include "parse_util.h"
#include "Program.h"
#include "IncDecExpr.h"
#include "AtomExpr.h"
#include "TypeExpr.h"
#include "Error.h"
#include "MonitorStmt.h"
#include "EventSrcExpr.h"
#include "SensorExpr.h"
#include "AssignMathStmt.h"
#include "ForStmt.h"
#include "RelExpr.h"
#include "NegateExpr.h"
#include "LogicalExpr.h"
#include "TernaryExpr.h"
#include "LabelStmt.h"
#include "GotoStmt.h"
#include "AddrOfExpr.h"
#include "DerefExpr.h"

#define yylex()		(gPreProc->Get(yylval))

static LexLocation sSavedLoc;

#line 159 "parse.y"

static void yyerror(const char *msg);

#line 136 "y.tab.c"

/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(void)
#endif

/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
#else
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#endif

/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(const char *s)
#endif
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(msg)
#endif

extern int YYPARSE_DECL();

#define OR 257
#define AND 258
#define REL_EQ 259
#define REL_NE 260
#define REL_LE 261
#define REL_GE 262
#define LEFT 263
#define RIGHT 264
#define UMINUS 265
#define INDIRECT 266
#define INCDEC 267
#define ABS 268
#define SIGN 269
#define TYPE 270
#define EVENT_SRC 271
#define LOWER_THAN_ELSE 272
#define ELSE 273
#define LOWER_THAN_EXPR_SHIFT 274
#define ID 275
#define NUMBER 276
#define ASSIGN 277
#define ASSIGN2 278
#define TASKOP 279
#define JUMP 280
#define TASK 281
#define SUB 282
#define STRING 283
#define PP_DEFINE 284
#define PP_INCLUDE 285
#define NL 286
#define WS 287
#define PP_ARG 288
#define PP_UNKNOWN 289
#define PP_IFDEF 290
#define PP_IF 291
#define PP_ELSE 292
#define PP_ELIF 293
#define PP_ENDIF 294
#define PP_UNDEF 295
#define PP_PRAGMA 296
#define PP_GLOM 297
#define PP_ERROR 298
#define PP_WARNING 299
#define IF 300
#define WHILE 301
#define DO 302
#define FOR 303
#define REPEAT 304
#define SWITCH 305
#define CASE 306
#define DEFAULT 307
#define MONITOR 308
#define CATCH 309
#define ACQUIRE 310
#define GOTO 311
#define ASM 312
#define INT 313
#define T_VOID 314
#define T_CONST 315
#define SENSOR 316
#define TASKID 317
#define NOLIST 318
#define RES 319
#define CTRUE 320
#define CFALSE 321
#define YYERRCODE 256
static const short yylhs[] = {                           -1,
    0,   35,   35,   36,   36,   36,   36,   36,   36,   22,
   30,   17,   17,   29,   31,   32,   32,   20,   20,   20,
   21,   21,   15,   15,   15,   15,   15,   15,   15,   13,
   13,    3,    3,   11,   11,   11,   37,    2,   12,   12,
    1,    1,    1,    1,    1,    1,    1,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    9,    9,    9,
    9,    9,    9,    8,    8,    8,    8,   10,   10,   19,
   19,    6,    6,   14,   14,    5,    5,    4,   27,   27,
   23,   23,   24,   24,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   38,   28,   25,   25,   25,
   26,   26,   26,   34,   33,   33,   33,   16,
};
static const short yylen[] = {                            2,
    1,    2,    0,    3,    3,    3,    6,    6,    2,    6,
    5,    1,    0,    5,    5,    4,    2,    1,    1,    0,
    4,    2,    1,    2,    2,    3,    1,    2,    3,    3,
    1,    1,    3,    2,    5,    3,    0,    4,    2,    0,
    1,    1,    2,    4,    2,    1,    2,    6,    8,    6,
    6,    6,    8,    8,    8,   10,    4,    5,    3,    4,
    6,    3,    2,    1,    3,    3,    3,    1,    0,    1,
    0,    1,    0,    2,    0,    2,    6,    2,    4,    3,
    1,    0,    3,    1,    2,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    2,    2,    2,    3,    3,    2,    2,    4,    4,
    3,    2,    5,    2,    2,    2,    4,    4,    4,    2,
    7,    5,    3,    6,    3,    0,    0,    3,    1,    0,
    1,    2,    4,    6,    3,    1,    0,    1,
};
static const short yydefred[] = {                         3,
    0,    0,    0,    0,    0,    0,    2,    0,  127,   31,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  126,    0,  126,  126,    0,    0,    0,    0,    0,
    0,   12,    0,    0,  127,    0,  127,    9,  127,    0,
    0,    4,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   85,    0,  102,  103,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  115,    0,    0,
    0,    0,  120,    0,    0,    0,   40,    5,   40,    6,
   36,    0,    0,   30,    0,    0,    0,    0,    0,    0,
  111,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  125,    0,    0,    0,    0,    0,    0,    0,
    0,  109,  110,  118,  119,  117,    0,  136,    0,    0,
    0,    0,    0,    0,    0,    0,   27,    0,    0,    0,
    0,  126,    0,    0,  127,    0,    0,    0,  127,  127,
    0,    0,    0,   41,   37,  127,   39,   42,   46,    0,
  127,    0,    0,    0,    0,  127,   35,    0,    0,  134,
    0,    0,  113,   14,   15,   25,   28,    0,   17,   11,
    0,   19,    0,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  126,    0,    0,   40,    8,
   63,   47,    0,    0,    0,   43,    0,    0,    0,    0,
    7,    0,  135,  124,   26,   29,    0,   22,   10,    0,
    0,    0,    0,    0,   68,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  129,   62,    0,    0,    0,    0,
    0,    0,   59,    0,   80,  121,   16,    0,   60,  127,
  127,    0,    0,  127,  127,    0,    0,   57,    0,    0,
    0,   38,   44,    0,    0,    0,   79,   21,    0,    0,
    0,    0,    0,    0,    0,  127,  127,    0,   58,  128,
    0,    0,    0,   48,    0,    0,   50,   51,    0,    0,
    0,   61,    0,    0,    0,    0,   75,    0,   53,   49,
  127,    0,    0,   72,   55,    0,    0,   74,   78,   56,
   76,    0,    0,    0,    0,   77,
};
static const short yydgoto[] = {                          1,
  167,  168,   10,  314,  318,  315,  169,  170,  171,  236,
   11,  128,   12,  312,  148,  138,   33,  172,  283,  194,
  195,   34,  275,  276,  244,  245,  173,   29,   35,   36,
   37,  149,  140,    6,    2,    7,  209,  175,
};
static const short yysindex[] = {                         0,
    0, -308,  -41,  143, -203,  -43,    0, -232,    0,    0,
  -10,  -19,  143,  143,   13,  143,  143,   34,   47,   71,
   78,    0,   79,    0,    0,  143,  143,  727,   64, -147,
 -124,    0, -158,   39,    0,   43,    0,    0,    0,   82,
  143,    0,  -41,  -92,  -92,  143,  -92,  -92,  143,  143,
  143,  143,    0,  143,    0,    0, 2132,  -92,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,    0,   61,  -93,
  -79,  106,    0,  160,  164,  -70,    0,    0,    0,    0,
    0,  143, 2997,    0, 2167, 2210, 2221, 2281, 2318, 2398,
    0, 2463,  856, 1671, 1546, 3068,  914,  514,  514,  379,
  379,  379,  379,   89,   89,    7,    7,  -92,  -92,  -92,
  143,  115,    0,  143,  167,  -35,  172,  422,  527, 2490,
  122,    0,    0,    0,    0,    0,  143,    0, 2997,  -42,
  143, 2526,   91,   91,  108,  -97,    0,  -58,   40, -135,
  159,    0,  180,  182,    0,  183,  184,  185,    0,    0,
  -49,  107,  -41,    0,    0,    0,    0,    0,    0,  168,
    0, 1481,  696,   65, -166,    0,    0,  143, 3009,    0,
  143, 2553,    0,    0,    0,    0,    0,  116,    0,    0,
 -145,    0,  -46,  190,  193,    0,  -34,  143,  143,  696,
  143,  143,  143,  200,  202,    0,   59,  100,    0,    0,
    0,    0,  143,  143,  143,    0,   -6,  186,  143,  189,
    0, 2580,    0,    0,    0,    0,  -32,    0,    0, -145,
  196, 2591, 2645,  -44,    0,  199, 2735, 2762,  143,  143,
  201,  143, 2997,  -29,    0,    0,  621, 2997, 2997, 2997,
  696,  143,    0, 2825,    0,    0,    0,  -13,    0,    0,
    0,  230,  143,    0,    0, 2837, 2879,    0, 2890,  217,
   59,    0,    0, 2997,  238,  239,    0,    0,  696,  696,
  143, 2997,  231,  696,  696,    0,    0,  143,    0,    0,
  232,  143,   16,    0, 2917,  143,    0,    0,   91,   91,
 2997,    0, 2997,  696,  233,  253,    0,  -14,    0,    0,
    0,   -7,   91,    0,    0,  696,   91,    0,    0,    0,
    0,  259,  143, 2944,   91,    0,
};
static const short yyrindex[] = {                         0,
    0,    4,    0,   87,   -5,    0,    0,    0,    0,    0,
  104,    0,   87,   87,    0,   87,   87,    0,    0,    0,
    0,    0,    0,    0,    0,   87,   87,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
   87,    0,    0, 1006, 1066,   87, 1095, 1124,   87,   87,
   87,   87,    0,   87,    0,    0,    0, 1163,   87,   87,
   87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
   87,   87,   87,   87,   87,   87,   87,    0,    0,    0,
    0,  820,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   87,  105,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   94, 1790, 1967, 2096, 2073, 1925, 2036, 1777,
 1784, 1828, 1866, 1636, 1739, 1510, 1598, 1252, 1353, 1407,
  -24,  977,    0,   87,    0,    0,    0,   -9,   -9,    0,
    0,    0,    0,    0,    0,    0,   87,    0,  -25,    0,
   87,    0,    0,    0,   28,    0,    0,    0,    0,  263,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -33,   -9,    0,    0,    0,    0,   87,  811,    0,
   87,    0,    0,    0,    0,    0,    0,   30,    0,    0,
    0,    0,    0,    0,  266,    0,    0,   87,   87,   -9,
  -21,   87,   87,    0,    0,    0,   -3,    0,    0,    0,
    0,    0,   87,   87,   87,    0, 1443,    0,   87,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   87,   87,
    0,   87,  -20,    0,    0,    0,   -9,   80,   83,  102,
   -9,  -11,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,    0,    0,    0,    0,    0,  -16,    0,
   87,    0,    0,  148,    0,  269,    0,    0,   -9,   -9,
   87,  252,    0,   -9,   -9,    0,    0,   87,    0,    0,
    0,   87,  328,    0,    0,   48,    0,    0,    0,    0,
  -12,    0,  149,   -9,    0,    0,    0,  127,    0,    0,
    0,  223,    0,    0,    0,   -9,  272,    0,    0,    0,
    0,    0,   87,    0,    0,    0,
};
static const short yygindex[] = {                         0,
  500,  157,  273,    0,    0,    0,    0, -198,    0,   19,
    0,  -82,  154,    0, -114,  140,    0,   -4,    0,    0,
    0,    0,    0,    0,    0,   60,    0,   73,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   69,
};
#define YYTABLESIZE 3335
static const short yytable[] = {                         28,
    8,  181,  235,    1,    3,  144,  129,   64,   44,   45,
    4,   47,   48,  127,  271,   38,  127,  127,  138,  137,
  127,   57,   58,  131,   43,   64,  127,  132,  127,   82,
  127,  133,  127,  252,  127,  193,   93,   69,  127,   42,
  130,   95,   39,   77,   96,   97,   98,   99,   75,  100,
   41,  251,   46,   76,  102,  103,  104,  105,  106,  107,
  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
  118,  119,  120,   49,    5,  127,  227,   30,   31,  127,
  190,   40,  180,  191,  124,  127,   50,  130,   69,  127,
   53,   16,   55,   56,  242,  270,   71,  235,   26,  138,
  137,   80,   80,   13,  131,   81,   81,   88,  132,   90,
   51,   91,  133,  218,   32,  258,  139,   52,   54,  142,
   65,  130,   27,   66,  127,   77,  247,   84,  127,   34,
   75,   74,  179,   73,  106,   76,  182,  106,   65,  219,
  220,   66,   67,   43,   34,  186,   34,   32,   33,  187,
   85,  106,  106,  225,  106,   86,  106,  226,  246,   73,
   67,   87,   32,   33,   73,   89,   73,  145,   73,  146,
  147,   73,   92,  222,   78,   16,  139,  145,  192,  146,
  147,  122,   26,  121,   14,   73,  106,   13,   84,   83,
   73,   84,   83,  232,  233,  123,  124,  237,  238,  125,
  174,  174,  243,  126,  127,  141,   27,  143,  248,  249,
  250,  150,  178,  165,  254,  188,  189,  196,  106,  198,
  197,  199,  201,  202,  203,  206,  211,  200,  228,  207,
  229,  204,  205,    9,  266,  267,  230,  269,  210,  239,
  231,  240,  257,  212,  253,  174,  255,  274,  221,   73,
  127,   73,   73,  127,  259,   54,  262,  263,  282,  268,
   54,  278,   54,  127,   54,  127,  243,   54,   14,  281,
  126,  127,  174,   78,  241,  289,  295,  145,  291,  146,
  147,   54,  292,  301,  127,  127,   54,  303,  304,  296,
  302,  310,  127,  311,  313,  127,  126,  126,  323,  184,
  185,  317,   23,   20,   24,  127,   18,  127,   13,   81,
   70,  127,  127,  127,  306,   94,  208,  127,  324,  174,
  223,  127,  127,  174,   15,   17,   18,   19,   20,   21,
  290,    0,  279,  280,   22,    0,  284,  285,   82,  217,
    0,    0,    0,    0,    0,   54,    0,   54,   54,    0,
  106,  174,  174,    0,  127,   78,  174,  174,  299,  300,
   52,  127,    0,    0,  127,   52,    0,   52,  106,   52,
  106,  106,   52,    0,   23,    0,  174,    0,   24,   25,
   83,   83,   73,  316,    0,    0,   52,    0,  174,  322,
    0,   52,   73,   73,   73,   73,   73,   73,    0,   73,
    0,   73,   73,  127,    0,   73,   73,    0,   15,   17,
   18,   19,   20,   21,    0,   77,    0,    0,   22,    0,
   75,   74,    0,   73,    0,   76,   73,   73,   73,   73,
   73,   73,   73,   73,   73,    0,   73,   73,   73,   73,
    0,    0,   73,   73,    0,    0,   73,   73,    0,    0,
   52,    0,   52,   52,   16,  307,  308,    0,   23,    0,
    0,   26,   24,   25,    0,    0,   13,    0,    0,  319,
    0,    0,    0,  321,    0,    0,    0,    0,   54,    0,
  164,  326,    0,    0,    0,   27,    0,    0,   54,   54,
   54,   54,   54,   54,    0,   54,    0,   54,   54,    0,
    0,   54,   54,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   54,   54,   54,   54,   54,   54,   54,   54,
   54,    0,   54,   54,   54,   54,    0,    0,   54,   54,
    0,    0,   54,   54,  165,    0,  166,   14,    0,    0,
   77,    0,    0,    0,    0,   75,   74,    0,   73,   16,
   76,    0,    0,    0,    0,    0,   26,    0,    0,    0,
    0,   13,    0,   67,    0,   68,    0,    0,    0,    0,
    0,    0,    0,   52,    0,  164,    0,    0,    0,    0,
   27,    0,    0,   52,   52,   52,   52,   52,   52,    0,
    0,    0,   52,   52,    0,    0,   52,   52,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   52,   52,   52,
   52,   52,   52,   52,   52,   52,    0,   52,   52,   52,
   52,   71,   72,   52,   52,   78,    0,   52,   52,  165,
    0,  176,   14,   16,    0,    0,    0,    0,    0,    0,
   26,    0,    0,    0,    0,   13,    0,    0,    0,    0,
    0,    0,  216,    0,    0,    0,    0,  151,    0,  164,
    0,    0,    0,    0,   27,    0,    0,   15,   17,   18,
   19,   20,   21,    0,    0,    0,    0,   22,    0,  234,
  152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  153,  154,  155,  156,  157,  158,    0,   16,  159,
    0,  160,  161,  162,  163,   26,    0,   23,    0,    0,
   13,   24,   25,  165,    0,  272,   14,    0,    0,    0,
  273,    0,    0,    0,  164,    0,    0,    0,    0,   27,
    0,    0,    0,   77,   64,    0,    0,    0,   75,   74,
    0,   73,    0,   76,   69,   70,   71,   72,  293,  294,
   78,    0,  151,  297,  298,    0,   67,    0,   68,   59,
    0,    0,   15,   17,   18,   19,   20,   21,    0,    0,
    0,    0,   22,  309,    0,  152,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  320,    0,    0,  165,    0,
   63,   14,    0,    0,    0,    0,  153,  154,  155,  156,
  157,  158,    0,    0,  159,    0,  160,  161,  162,  163,
    0,    0,   23,    0,    0,    0,   24,   25,    0,    0,
   62,  122,    0,    0,  122,    0,  112,  112,    0,    0,
  112,  112,  112,  112,  112,    0,  112,    0,  122,  122,
    0,  122,    0,    0,    0,    0,  151,  112,  112,  112,
  112,  112,  112,    0,    0,    0,   15,   17,   18,   19,
   20,   21,   77,   64,    0,    0,   22,   75,   74,  152,
   73,    0,   76,  122,    0,    0,    0,    0,    0,    0,
    0,    0,  112,  112,    0,   67,    0,   68,    0,    0,
  153,  154,  155,  156,  157,  158,    0,    0,  159,    0,
  160,  161,  162,  163,    0,  122,   23,    0,    0,    0,
   24,   25,    0,  112,  112,    0,    0,    0,    0,   63,
   77,  151,    0,    0,    0,   75,   74,    0,   73,    0,
   76,   15,   17,   18,   19,   20,   21,    0,    0,    0,
    0,   22,    0,   67,  152,   68,    0,    0,    0,   62,
    0,    0,    0,   60,   61,   65,   66,   69,   70,   71,
   72,    0,    0,   78,    0,  153,  154,  155,  156,  157,
  158,   79,    0,  159,    0,  160,  161,  162,  163,    0,
    0,   23,    0,  123,  123,   24,   25,  123,  123,  123,
  123,  123,    0,  123,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,  123,  123,  123,  123,  123,
    0,    0,  107,  107,    0,    0,  107,  107,  107,  107,
  107,    0,  107,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  107,  107,  107,  107,  107,  107,  123,
  123,    0,    0,    0,    0,    0,  112,  112,  112,  112,
  112,  112,  112,  112,    0,  122,  112,  122,  122,    0,
    0,    0,    0,    0,  112,    0,  112,  112,  107,  107,
  123,  123,  108,  108,    0,    0,  108,  108,  108,  108,
  108,    0,  108,   61,   65,   66,   69,   70,   71,   72,
    0,    0,   78,  108,  108,  108,  108,  108,  108,  107,
  107,  104,  104,    0,    0,  104,  104,  104,  104,  104,
    0,  104,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  104,  104,  104,  104,  104,  104,  108,  108,
  116,  116,    0,    0,  116,  116,  116,  116,  116,    0,
  116,    0,   65,   66,   69,   70,   71,   72,    0,    0,
   78,  116,  116,  116,  116,  116,  116,  104,  104,  108,
  108,    0,    0,    0,    0,    0,    0,    0,    0,  114,
  114,    0,    0,  114,  114,  114,  114,  114,    0,  114,
    0,    0,    0,    0,    0,    0,  116,  116,  104,  104,
  114,  114,  114,  114,  114,  114,    0,    0,    0,    0,
    0,    0,    0,  123,  123,  123,  123,  123,  123,  123,
  123,    0,    0,  123,    0,    0,    0,  116,  116,    0,
    0,  123,    0,  123,  123,  114,  114,    0,    0,    0,
    0,    0,  107,  107,  107,  107,  107,  107,  107,  107,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  107,    0,  107,  107,    0,    0,  114,  114,   88,   88,
    0,    0,   88,   88,   88,   88,   88,    0,   88,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   88,
   88,   88,   88,   88,   88,    0,    0,    0,    0,    0,
    0,    0,  108,  108,  108,  108,  108,  108,  108,  108,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  108,    0,  108,  108,   88,   88,    0,    0,    0,    0,
    0,  104,  104,  104,  104,  104,  104,  104,  104,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
    0,  104,  104,    0,    0,   88,   88,    0,    0,    0,
  116,  116,  116,  116,  116,  116,  116,  116,    0,   89,
   89,    0,    0,   89,   89,   89,   89,   89,  116,   89,
  116,  116,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   89,   89,   89,   89,   89,    0,    0,    0,  114,
  114,  114,  114,  114,  114,  114,  114,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  114,    0,  114,
  114,    0,    0,   92,   92,   89,   89,   92,   92,   92,
   92,   92,    0,   92,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   92,   92,   92,   92,   92,   92,
    0,    0,    0,    0,    0,    0,   89,   89,    0,  112,
  112,    0,    0,    0,  112,  112,    0,  112,    0,  112,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
   92,  112,  112,  112,  112,  112,    0,    0,   88,   88,
   88,   88,   88,   88,   88,   88,    0,   77,   64,    0,
    0,    0,   75,   74,    0,   73,   88,   76,   88,   88,
   92,   92,    0,    0,    0,    0,  112,    0,    0,    0,
   67,  215,   68,   59,    0,    0,    0,   87,    0,    0,
   87,    0,   87,   87,   87,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  112,   87,   87,   87,
   87,   87,   87,    0,   63,    0,    0,    0,    0,    0,
    0,    0,   77,   64,    0,    0,    0,   75,   74,    0,
   73,    0,   76,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   87,   87,   62,   67,    0,   68,    0,   89,
   89,   89,   89,   89,   89,   89,   89,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,    0,   89,
   89,    0,    0,   87,   87,   86,    0,    0,   86,   63,
   86,   86,   86,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   86,   86,   86,   86,   86,
   86,    0,    0,   92,   92,   92,   92,   92,   92,   92,
   92,    0,    0,   93,    0,    0,   93,    0,    0,   93,
    0,   92,    0,   92,   92,    0,    0,    0,    0,    0,
   86,   86,    0,   93,   93,   93,   93,   93,   93,  112,
  112,  112,  112,  112,  112,  112,  112,   77,   64,  112,
    0,    0,   75,   74,    0,   73,    0,   76,    0,  112,
  112,   86,   86,    0,    0,    0,    0,    0,   93,   93,
   67,    0,   68,    0,    0,    0,    0,   60,   61,   65,
   66,   69,   70,   71,   72,    0,    0,   78,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  213,  214,   93,
   93,    0,    0,    0,   63,    0,   87,   87,   87,   87,
   87,   87,   87,   87,    0,    0,   94,    0,    0,   94,
    0,    0,   94,    0,   87,    0,   87,   87,    0,    0,
    0,    0,    0,    0,   62,    0,   94,   94,   94,   94,
   94,   94,    0,    0,   65,   66,   69,   70,   71,   72,
    0,    0,   78,    0,  100,    0,    0,  100,    0,    0,
  100,  101,    0,    0,  101,    0,    0,  101,    0,    0,
  105,   94,   94,  105,  100,  100,  100,  100,  100,  100,
    0,  101,  101,  101,  101,  101,  101,  105,  105,    0,
  105,    0,  105,    0,   86,   86,   86,   86,   86,   86,
   86,   86,   94,   94,    0,   97,    0,    0,   97,  100,
  100,   97,   86,    0,   86,   86,  101,  101,    0,    0,
    0,    0,  105,    0,    0,   97,   97,   97,   97,   97,
   97,    0,   93,   93,   93,   93,   93,   93,   93,   93,
  100,  100,    0,   98,    0,    0,   98,  101,  101,   98,
   93,    0,   93,   93,  105,    0,    0,    0,    0,    0,
   97,   97,    0,   98,   98,   98,   98,   98,   98,   65,
   66,   69,   70,   71,   72,    0,    0,   78,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   97,   97,    0,    0,    0,    0,    0,   98,   98,
    0,    0,   96,    0,    0,   96,    0,    0,   96,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   96,   96,    0,   96,    0,   96,    0,   98,
   98,    0,    0,    0,    0,   94,   94,   94,   94,   94,
   94,   94,   94,    0,    0,    0,    0,   91,    0,    0,
   91,    0,    0,   94,    0,   94,   94,   96,   96,    0,
    0,    0,    0,    0,   91,   91,    0,   91,    0,   91,
    0,    0,    0,  100,  100,  100,  100,  100,  100,    0,
  101,  101,  101,  101,  101,  101,  105,  105,   96,   96,
    0,  100,    0,  100,  100,    0,    0,    0,  101,   91,
  101,  101,    0,    0,  105,    0,  105,  105,    0,    0,
    0,    0,    0,   99,    0,    0,   99,    0,    0,   99,
    0,    0,    0,    0,   97,   97,   97,   97,   97,   97,
   91,   91,    0,   99,   99,    0,   99,    0,   99,    0,
    0,    0,   97,    0,   97,   97,    0,    0,    0,    0,
   90,    0,    0,   90,    0,    0,   90,    0,    0,    0,
    0,    0,   98,   98,   98,   98,   98,   98,   99,   99,
   90,   90,    0,   90,    0,   90,   95,    0,    0,   95,
   98,    0,   98,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,   95,    0,   95,    0,   95,   99,
   99,    0,    0,    0,    0,   90,   90,    0,   77,   64,
    0,    0,  101,   75,   74,    0,   73,    0,   76,    0,
    0,   96,   96,   96,   96,    0,    0,    0,   95,   95,
    0,   67,    0,   68,   59,    0,   90,   90,    0,   96,
    0,   96,   96,   77,   64,    0,    0,  131,   75,   74,
    0,   73,    0,   76,    0,    0,    0,    0,    0,   95,
   95,    0,    0,   91,   91,   63,   67,    0,   68,   59,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   91,    0,   91,   91,    0,   77,   64,    0,    0,
  132,   75,   74,    0,   73,   62,   76,   77,   64,    0,
   63,  133,   75,   74,    0,   73,    0,   76,    0,   67,
    0,   68,   59,    0,    0,    0,    0,    0,    0,    0,
   67,    0,   68,   59,    0,    0,    0,    0,    0,    0,
   62,    0,   99,   99,   99,   99,    0,    0,    0,    0,
    0,    0,    0,   63,    0,    0,    0,    0,    0,    0,
   99,    0,   99,   99,   63,    0,    0,   77,   64,    0,
    0,  134,   75,   74,    0,   73,    0,   76,    0,   90,
   90,    0,    0,   62,    0,    0,    0,    0,    0,    0,
   67,    0,   68,   59,   62,    0,    0,   90,    0,   90,
   90,    0,   95,   95,   77,   64,    0,    0,  135,   75,
   74,    0,   73,    0,   76,    0,    0,    0,    0,    0,
   95,    0,   95,   95,   63,    0,    0,   67,    0,   68,
   59,    0,    0,    0,    0,    0,    0,    0,   60,   61,
   65,   66,   69,   70,   71,   72,    0,    0,   78,    0,
    0,    0,    0,    0,   62,    0,    0,    0,    0,    0,
    0,   63,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   60,   61,   65,   66,   69,   70,   71,
   72,    0,    0,   78,   77,   64,    0,    0,  136,   75,
   74,   62,   73,    0,   76,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   67,    0,   68,
   59,    0,    0,    0,    0,    0,   60,   61,   65,   66,
   69,   70,   71,   72,    0,    0,   78,   60,   61,   65,
   66,   69,   70,   71,   72,    0,    0,   78,    0,    0,
    0,   63,    0,    0,    0,    0,    0,    0,    0,   77,
   64,    0,    0,    0,   75,   74,    0,   73,    0,   76,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  137,   62,   67,    0,   68,   59,   77,   64,    0,    0,
    0,   75,   74,    0,   73,    0,   76,   60,   61,   65,
   66,   69,   70,   71,   72,    0,    0,   78,    0,   67,
    0,   68,   59,    0,    0,    0,   63,    0,    0,    0,
    0,    0,   77,   64,    0,    0,    0,   75,   74,    0,
   73,    0,   76,    0,   60,   61,   65,   66,   69,   70,
   71,   72,  177,   63,   78,   67,   62,   68,   59,   77,
   64,    0,    0,    0,   75,   74,    0,   73,    0,   76,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,   62,   68,   59,   77,   64,  183,   63,
    0,   75,   74,    0,   73,    0,   76,   77,   64,    0,
    0,  260,   75,   74,    0,   73,    0,   76,    0,   67,
    0,   68,   59,    0,    0,  224,   63,    0,    0,   62,
   67,    0,   68,   59,   60,   61,   65,   66,   69,   70,
   71,   72,    0,    0,   78,    0,    0,    0,    0,    0,
    0,    0,  256,   63,    0,    0,   62,    0,    0,    0,
    0,   77,   64,    0,   63,  261,   75,   74,    0,   73,
    0,   76,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   62,   67,    0,   68,   59,    0,    0,
    0,    0,    0,    0,   62,    0,    0,    0,    0,   60,
   61,   65,   66,   69,   70,   71,   72,    0,    0,   78,
    0,    0,    0,    0,    0,    0,    0,    0,   63,    0,
    0,    0,    0,    0,    0,    0,   60,   61,   65,   66,
   69,   70,   71,   72,    0,    0,   78,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   62,    0,
    0,   77,   64,    0,    0,  264,   75,   74,    0,   73,
    0,   76,   60,   61,   65,   66,   69,   70,   71,   72,
    0,    0,   78,    0,   67,    0,   68,   59,   77,   64,
    0,    0,  265,   75,   74,    0,   73,    0,   76,   60,
   61,   65,   66,   69,   70,   71,   72,    0,    0,   78,
    0,   67,    0,   68,   59,    0,    0,    0,   63,    0,
    0,    0,    0,    0,    0,    0,   60,   61,   65,   66,
   69,   70,   71,   72,    0,    0,   78,   60,   61,   65,
   66,   69,   70,   71,   72,   63,    0,   78,   62,    0,
    0,   77,   64,    0,    0,    0,   75,   74,    0,   73,
    0,   76,    0,   77,   64,    0,    0,  286,   75,   74,
    0,   73,  277,   76,   67,   62,   68,   59,    0,    0,
    0,    0,    0,    0,    0,    0,   67,    0,   68,   59,
    0,   60,   61,   65,   66,   69,   70,   71,   72,    0,
    0,   78,    0,    0,    0,   77,   64,    0,   63,  287,
   75,   74,    0,   73,    0,   76,   77,   64,    0,    0,
   63,   75,   74,    0,   73,    0,   76,    0,   67,    0,
   68,   59,    0,    0,    0,    0,    0,  288,   62,   67,
    0,   68,   59,   77,   64,    0,    0,  305,   75,   74,
   62,   73,    0,   76,    0,    0,    0,    0,    0,    0,
    0,    0,   63,    0,    0,    0,   67,    0,   68,   59,
   77,   64,    0,   63,  325,   75,   74,    0,   73,    0,
   76,   60,   61,   65,   66,   69,   70,   71,   72,    0,
    0,   78,   62,   67,    0,   68,   59,    0,    0,    0,
   63,    0,    0,   62,    0,    0,    0,    0,   60,   61,
   65,   66,   69,   70,   71,   72,    0,    0,   78,    0,
    0,    0,    0,   77,   64,    0,    0,   63,   75,   74,
   62,   73,    0,   76,    0,   77,   64,    0,    0,    0,
   75,   74,    0,   73,    0,   76,   67,    0,   68,   59,
    0,    0,    0,    0,    0,    0,    0,   62,   67,    0,
   68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   60,   61,   65,   66,   69,   70,   71,   72,    0,
   63,   78,    0,   60,   61,   65,   66,   69,   70,   71,
   72,    0,   63,   78,   77,   64,    0,    0,    0,   75,
   74,    0,   73,    0,   76,    0,    0,    0,    0,    0,
   62,    0,    0,    0,    0,    0,    0,   67,    0,   68,
    0,    0,   62,    0,    0,   60,   61,   65,   66,   69,
   70,   71,   72,    0,    0,   78,   60,   61,   65,   66,
   69,   70,   71,   72,    0,    0,   78,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   60,   61,   65,   66,   69,   70,   71,
   72,    0,    0,   78,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   60,   61,   65,   66,   69,   70,   71,   72,    0,    0,
   78,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   60,   61,   65,   66,   69,   70,   71,
   72,    0,    0,   78,    0,   60,   61,   65,   66,   69,
   70,   71,   72,    0,    0,   78,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   65,   66,   69,   70,
   71,   72,    0,    0,   78,
};
static const short yycheck[] = {                          4,
   42,   44,  201,    0,  313,   41,   89,   41,   13,   14,
  319,   16,   17,   38,   44,   59,   38,   42,   44,   44,
   42,   26,   27,   44,   44,   59,   38,   44,   38,   41,
   42,   44,   42,   40,   38,  150,   41,   59,   42,   59,
   44,   46,  275,   37,   49,   50,   51,   52,   42,   54,
   61,   58,   40,   47,   59,   60,   61,   62,   63,   64,
   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
   75,   76,   77,   40,    2,   38,  191,  281,  282,   42,
   41,    9,  125,   44,   91,   38,   40,   92,   41,   42,
   22,   33,   24,   25,   36,  125,   59,  296,   40,  125,
  125,   38,   38,   45,  125,   42,   42,   35,  125,   37,
   40,   39,  125,  280,  318,  230,  121,   40,   40,  124,
   41,  125,   64,   41,   38,   37,  209,  275,   42,   44,
   42,   43,  137,   45,   41,   47,  141,   44,   59,  306,
  307,   59,   41,   44,   59,   38,   61,   44,   44,   42,
  275,   58,   59,   38,   61,  314,   63,   42,   59,   33,
   59,  123,   59,   59,   38,  123,   40,  313,   42,  315,
  316,   45,   91,  178,  267,   33,  181,  313,  314,  315,
  316,  275,   40,  123,  126,   59,   93,   45,   41,   41,
   64,   44,   44,  198,  199,  275,   91,  202,  203,   40,
  128,  129,  207,   40,  275,   91,   64,   41,  213,  214,
  215,   40,   91,  123,  219,  313,  275,   59,  125,   40,
  152,   40,   40,   40,   40,  275,   59,  155,  275,  123,
   41,  159,  160,  275,  239,  240,   44,  242,  166,   40,
  275,   40,  275,  171,   59,  173,   58,  252,  176,  123,
  275,  125,  126,  275,   59,   33,  301,   59,  263,   59,
   38,  275,   40,  275,   42,  275,  271,   45,  126,   40,
  280,  275,  200,  267,  206,   59,  281,  313,   41,  315,
  316,   59,   44,  288,  281,  282,   64,  292,  273,   59,
   59,   59,  317,   41,  309,  317,  306,  307,   40,  143,
  144,  309,  275,   41,  275,  317,   41,  317,  314,   41,
   59,   40,  275,  317,  296,   43,  163,  314,  323,  247,
  181,  318,  275,  251,  266,  267,  268,  269,  270,  271,
  271,   -1,  260,  261,  276,   -1,  264,  265,  275,  275,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,
  257,  279,  280,   -1,  317,  267,  284,  285,  286,  287,
   33,  275,   -1,   -1,  317,   38,   -1,   40,  275,   42,
  277,  278,   45,   -1,  316,   -1,  304,   -1,  320,  321,
  317,  317,  256,  311,   -1,   -1,   59,   -1,  316,  317,
   -1,   64,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,  275,  276,  317,   -1,  279,  280,   -1,  266,  267,
  268,  269,  270,  271,   -1,   37,   -1,   -1,  276,   -1,
   42,   43,   -1,   45,   -1,   47,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,  310,  311,  312,  313,
   -1,   -1,  316,  317,   -1,   -1,  320,  321,   -1,   -1,
  123,   -1,  125,  126,   33,  299,  300,   -1,  316,   -1,
   -1,   40,  320,  321,   -1,   -1,   45,   -1,   -1,  313,
   -1,   -1,   -1,  317,   -1,   -1,   -1,   -1,  256,   -1,
   59,  325,   -1,   -1,   -1,   64,   -1,   -1,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,  275,  276,   -1,
   -1,  279,  280,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,  310,  311,  312,  313,   -1,   -1,  316,  317,
   -1,   -1,  320,  321,  123,   -1,  125,  126,   -1,   -1,
   37,   -1,   -1,   -1,   -1,   42,   43,   -1,   45,   33,
   47,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,
   -1,   45,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   59,   -1,   -1,   -1,   -1,
   64,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
   -1,   -1,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,  310,  311,  312,
  313,  263,  264,  316,  317,  267,   -1,  320,  321,  123,
   -1,  125,  126,   33,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,  173,   -1,   -1,   -1,   -1,  256,   -1,   59,
   -1,   -1,   -1,   -1,   64,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,  276,   -1,  200,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  300,  301,  302,  303,  304,  305,   -1,   33,  308,
   -1,  310,  311,  312,  313,   40,   -1,  316,   -1,   -1,
   45,  320,  321,  123,   -1,  125,  126,   -1,   -1,   -1,
  251,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,
   -1,   45,   -1,   47,  261,  262,  263,  264,  279,  280,
  267,   -1,  256,  284,  285,   -1,   60,   -1,   62,   63,
   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,   -1,
   -1,   -1,  276,  304,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,   -1,  123,   -1,
   94,  126,   -1,   -1,   -1,   -1,  300,  301,  302,  303,
  304,  305,   -1,   -1,  308,   -1,  310,  311,  312,  313,
   -1,   -1,  316,   -1,   -1,   -1,  320,  321,   -1,   -1,
  124,   41,   -1,   -1,   44,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,   -1,   58,   59,
   -1,   61,   -1,   -1,   -1,   -1,  256,   58,   59,   60,
   61,   62,   63,   -1,   -1,   -1,  266,  267,  268,  269,
  270,  271,   37,   38,   -1,   -1,  276,   42,   43,  279,
   45,   -1,   47,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   -1,   60,   -1,   62,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,   -1,  308,   -1,
  310,  311,  312,  313,   -1,  125,  316,   -1,   -1,   -1,
  320,  321,   -1,  124,  125,   -1,   -1,   -1,   -1,   94,
   37,  256,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,
   47,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
   -1,  276,   -1,   60,  279,   62,   -1,   -1,   -1,  124,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
  264,   -1,   -1,  267,   -1,  300,  301,  302,  303,  304,
  305,  275,   -1,  308,   -1,  310,  311,  312,  313,   -1,
   -1,  316,   -1,   37,   38,  320,  321,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,   93,
   94,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,  264,   -1,  275,  267,  277,  278,   -1,
   -1,   -1,   -1,   -1,  275,   -1,  277,  278,   93,   94,
  124,  125,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,  258,  259,  260,  261,  262,  263,  264,
   -1,   -1,  267,   58,   59,   60,   61,   62,   63,  124,
  125,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   63,   93,   94,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,
   47,   -1,  259,  260,  261,  262,  263,  264,   -1,   -1,
  267,   58,   59,   60,   61,   62,   63,   93,   94,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,  124,  125,
   58,   59,   60,   61,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
  264,   -1,   -1,  267,   -1,   -1,   -1,  124,  125,   -1,
   -1,  275,   -1,  277,  278,   93,   94,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,  264,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  275,   -1,  277,  278,   -1,   -1,  124,  125,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,  264,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  275,   -1,  277,  278,   93,   94,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,  264,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  275,
   -1,  277,  278,   -1,   -1,  124,  125,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,  263,  264,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,  275,   47,
  277,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   60,   61,   62,   63,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,  264,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  275,   -1,  277,
  278,   -1,   -1,   37,   38,   93,   94,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   37,
   38,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   59,   60,   61,   62,   63,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,  264,   -1,   37,   38,   -1,
   -1,   -1,   42,   43,   -1,   45,  275,   47,  277,  278,
  124,  125,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   38,   -1,   -1,
   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   58,   59,   60,
   61,   62,   63,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,  124,   60,   -1,   62,   -1,  257,
  258,  259,  260,  261,  262,  263,  264,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  275,   -1,  277,
  278,   -1,   -1,  124,  125,   38,   -1,   -1,   41,   94,
   43,   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,
   63,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
  264,   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,
   -1,  275,   -1,  277,  278,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,   58,   59,   60,   61,   62,   63,  257,
  258,  259,  260,  261,  262,  263,  264,   37,   38,  267,
   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,  277,
  278,  124,  125,   -1,   -1,   -1,   -1,   -1,   93,   94,
   60,   -1,   62,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,  264,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,  124,
  125,   -1,   -1,   -1,   94,   -1,  257,  258,  259,  260,
  261,  262,  263,  264,   -1,   -1,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,  275,   -1,  277,  278,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   58,   59,   60,   61,
   62,   63,   -1,   -1,  259,  260,  261,  262,  263,  264,
   -1,   -1,  267,   -1,   38,   -1,   -1,   41,   -1,   -1,
   44,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   41,   93,   94,   44,   58,   59,   60,   61,   62,   63,
   -1,   58,   59,   60,   61,   62,   63,   58,   59,   -1,
   61,   -1,   63,   -1,  257,  258,  259,  260,  261,  262,
  263,  264,  124,  125,   -1,   38,   -1,   -1,   41,   93,
   94,   44,  275,   -1,  277,  278,   93,   94,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   58,   59,   60,   61,   62,
   63,   -1,  257,  258,  259,  260,  261,  262,  263,  264,
  124,  125,   -1,   38,   -1,   -1,   41,  124,  125,   44,
  275,   -1,  277,  278,  125,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,   58,   59,   60,   61,   62,   63,  259,
  260,  261,  262,  263,  264,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   -1,   63,   -1,  124,
  125,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,  264,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,  275,   -1,  277,  278,   93,   94,   -1,
   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   63,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,
  257,  258,  259,  260,  261,  262,  257,  258,  124,  125,
   -1,  275,   -1,  277,  278,   -1,   -1,   -1,  275,   93,
  277,  278,   -1,   -1,  275,   -1,  277,  278,   -1,   -1,
   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
  124,  125,   -1,   58,   59,   -1,   61,   -1,   63,   -1,
   -1,   -1,  275,   -1,  277,  278,   -1,   -1,   -1,   -1,
   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,   93,   94,
   58,   59,   -1,   61,   -1,   63,   41,   -1,   -1,   44,
  275,   -1,  277,  278,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   63,  124,
  125,   -1,   -1,   -1,   -1,   93,   94,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,  257,  258,  259,  260,   -1,   -1,   -1,   93,   94,
   -1,   60,   -1,   62,   63,   -1,  124,  125,   -1,  275,
   -1,  277,  278,   37,   38,   -1,   -1,   41,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,  257,  258,   94,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  275,   -1,  277,  278,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   -1,   45,  124,   47,   37,   38,   -1,
   94,   41,   42,   43,   -1,   45,   -1,   47,   -1,   60,
   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,  257,  258,  259,  260,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
  275,   -1,  277,  278,   94,   -1,   -1,   37,   38,   -1,
   -1,   41,   42,   43,   -1,   45,   -1,   47,   -1,  257,
  258,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   -1,   62,   63,  124,   -1,   -1,  275,   -1,  277,
  278,   -1,  257,  258,   37,   38,   -1,   -1,   41,   42,
   43,   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
  275,   -1,  277,  278,   94,   -1,   -1,   60,   -1,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,  264,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
  264,   -1,   -1,  267,   37,   38,   -1,   -1,   41,   42,
   43,  124,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,
   63,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,  264,   -1,   -1,  267,  257,  258,  259,
  260,  261,  262,  263,  264,   -1,   -1,  267,   -1,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,  124,   60,   -1,   62,   63,   37,   38,   -1,   -1,
   -1,   42,   43,   -1,   45,   -1,   47,  257,  258,  259,
  260,  261,  262,  263,  264,   -1,   -1,  267,   -1,   60,
   -1,   62,   63,   -1,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,   -1,   47,   -1,  257,  258,  259,  260,  261,  262,
  263,  264,   93,   94,  267,   60,  124,   62,   63,   37,
   38,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,  124,   62,   63,   37,   38,   93,   94,
   -1,   42,   43,   -1,   45,   -1,   47,   37,   38,   -1,
   -1,   41,   42,   43,   -1,   45,   -1,   47,   -1,   60,
   -1,   62,   63,   -1,   -1,   93,   94,   -1,   -1,  124,
   60,   -1,   62,   63,  257,  258,  259,  260,  261,  262,
  263,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   37,   38,   -1,   94,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,  264,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,  264,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   37,   38,   -1,   -1,   41,   42,   43,   -1,   45,
   -1,   47,  257,  258,  259,  260,  261,  262,  263,  264,
   -1,   -1,  267,   -1,   60,   -1,   62,   63,   37,   38,
   -1,   -1,   41,   42,   43,   -1,   45,   -1,   47,  257,
  258,  259,  260,  261,  262,  263,  264,   -1,   -1,  267,
   -1,   60,   -1,   62,   63,   -1,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,  264,   -1,   -1,  267,  257,  258,  259,
  260,  261,  262,  263,  264,   94,   -1,  267,  124,   -1,
   -1,   37,   38,   -1,   -1,   -1,   42,   43,   -1,   45,
   -1,   47,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   -1,   45,   58,   47,   60,  124,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   63,
   -1,  257,  258,  259,  260,  261,  262,  263,  264,   -1,
   -1,  267,   -1,   -1,   -1,   37,   38,   -1,   94,   41,
   42,   43,   -1,   45,   -1,   47,   37,   38,   -1,   -1,
   94,   42,   43,   -1,   45,   -1,   47,   -1,   60,   -1,
   62,   63,   -1,   -1,   -1,   -1,   -1,   58,  124,   60,
   -1,   62,   63,   37,   38,   -1,   -1,   41,   42,   43,
  124,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   94,   -1,   -1,   -1,   60,   -1,   62,   63,
   37,   38,   -1,   94,   41,   42,   43,   -1,   45,   -1,
   47,  257,  258,  259,  260,  261,  262,  263,  264,   -1,
   -1,  267,  124,   60,   -1,   62,   63,   -1,   -1,   -1,
   94,   -1,   -1,  124,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,  264,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   37,   38,   -1,   -1,   94,   42,   43,
  124,   45,   -1,   47,   -1,   37,   38,   -1,   -1,   -1,
   42,   43,   -1,   45,   -1,   47,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,  264,   -1,
   94,  267,   -1,  257,  258,  259,  260,  261,  262,  263,
  264,   -1,   94,  267,   37,   38,   -1,   -1,   -1,   42,
   43,   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,
   -1,   -1,  124,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,  264,   -1,   -1,  267,  257,  258,  259,  260,
  261,  262,  263,  264,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,  263,  264,   -1,   -1,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
  264,   -1,   -1,  267,   -1,  257,  258,  259,  260,  261,
  262,  263,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  259,  260,  261,  262,
  263,  264,   -1,   -1,  267,
};
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 321
#define YYTRANSLATE(a) ((a) > YYMAXTOKEN ? (YYMAXTOKEN + 1) : (a))
#if YYDEBUG
static const char *yyname[] = {

"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,"'$'","'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'",0,"'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'","'@'",0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"OR","AND",
"REL_EQ","REL_NE","REL_LE","REL_GE","LEFT","RIGHT","UMINUS","INDIRECT","INCDEC",
"ABS","SIGN","TYPE","EVENT_SRC","LOWER_THAN_ELSE","ELSE",
"LOWER_THAN_EXPR_SHIFT","ID","NUMBER","ASSIGN","ASSIGN2","TASKOP","JUMP","TASK",
"SUB","STRING","PP_DEFINE","PP_INCLUDE","NL","WS","PP_ARG","PP_UNKNOWN",
"PP_IFDEF","PP_IF","PP_ELSE","PP_ELIF","PP_ENDIF","PP_UNDEF","PP_PRAGMA",
"PP_GLOM","PP_ERROR","PP_WARNING","IF","WHILE","DO","FOR","REPEAT","SWITCH",
"CASE","DEFAULT","MONITOR","CATCH","ACQUIRE","GOTO","ASM","INT","T_VOID",
"T_CONST","SENSOR","TASKID","NOLIST","RES","CTRUE","CFALSE","illegal-symbol",
};
static const char *yyrule[] = {
"$accept : S",
"S : unit_list",
"unit_list : unit_list unit",
"unit_list :",
"unit : INT var_list ';'",
"unit : loc fragment loc",
"unit : loc subfragment loc",
"unit : loc sub_head '{' stmt_list '}' loc",
"unit : loc function_head '{' stmt_list '}' loc",
"unit : resource ';'",
"function_head : nolist_opt T_VOID ID '(' args ')'",
"sub_head : SUB ID '(' sarg_list ')'",
"nolist_opt : NOLIST",
"nolist_opt :",
"fragment : TASK ID '(' ')' block",
"subfragment : SUB ID '(' ')' block",
"sarg_list : sarg_list ',' arg_type ID",
"sarg_list : arg_type ID",
"args : arg_list",
"args : T_VOID",
"args :",
"arg_list : arg_list ',' arg_type ID",
"arg_list : arg_type ID",
"arg_type : INT",
"arg_type : T_CONST INT",
"arg_type : INT '&'",
"arg_type : T_CONST INT '&'",
"arg_type : SENSOR",
"arg_type : INT '*'",
"arg_type : T_CONST INT '*'",
"var_list : var_list ',' var_item",
"var_list : var_item",
"var_item : var_decl",
"var_item : var_decl '=' expr",
"var_decl : ID loc",
"var_decl : ID loc '[' expr ']'",
"var_decl : '*' ID loc",
"$$1 :",
"block : '{' $$1 stmt_list '}'",
"stmt_list : stmt_list stmt",
"stmt_list :",
"stmt : ';'",
"stmt : block",
"stmt : case stmt",
"stmt : loc ID ':' stmt",
"stmt : error ';'",
"stmt : control_stmt",
"stmt : misc_stmt loc",
"control_stmt : WHILE '(' expr ')' loc stmt",
"control_stmt : DO loc stmt WHILE '(' expr ')' ';'",
"control_stmt : REPEAT '(' expr ')' loc stmt",
"control_stmt : SWITCH '(' expr ')' loc stmt",
"control_stmt : IF '(' expr ')' loc stmt",
"control_stmt : IF '(' expr ')' loc stmt ELSE stmt",
"control_stmt : MONITOR loc '(' expr ')' loc block handler_list",
"control_stmt : ACQUIRE loc '(' expr ')' loc block opt_handler",
"control_stmt : FOR '(' opt_expr_stmt ';' opt_expr ';' opt_expr_stmt ')' loc stmt",
"control_stmt : GOTO ID saveloc ';'",
"misc_stmt : ASM '{' asm_list '}' ';'",
"misc_stmt : saveloc JUMP ';'",
"misc_stmt : TASKOP saveloc ID ';'",
"misc_stmt : loc ID '(' params ')' ';'",
"misc_stmt : INT var_list ';'",
"misc_stmt : expr_stmt ';'",
"expr_stmt : expr",
"expr_stmt : expr ASSIGN expr",
"expr_stmt : expr ASSIGN2 expr",
"expr_stmt : expr '=' expr",
"opt_expr_stmt : expr_stmt",
"opt_expr_stmt :",
"opt_expr : expr",
"opt_expr :",
"opt_handler : handler",
"opt_handler :",
"handler_list : handler_list evt_handler",
"handler_list :",
"evt_handler : CATCH block",
"evt_handler : CATCH loc '(' expr ')' block",
"handler : CATCH block",
"case : saveloc CASE expr ':'",
"case : saveloc DEFAULT ':'",
"params : param_list",
"params :",
"param_list : param_list ',' expr",
"param_list : expr",
"expr : NUMBER saveloc",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '%' expr",
"expr : expr LEFT expr",
"expr : expr RIGHT expr",
"expr : expr '^' expr",
"expr : expr REL_EQ expr",
"expr : expr REL_LE expr",
"expr : expr REL_GE expr",
"expr : expr REL_NE expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : CTRUE saveloc",
"expr : CFALSE saveloc",
"expr : '!' expr",
"expr : expr AND expr",
"expr : expr OR expr",
"expr : '-' expr",
"expr : '~' expr",
"expr : ABS '(' expr ')'",
"expr : SIGN '(' expr ')'",
"expr : '(' expr ')'",
"expr : loc ID",
"expr : loc ID '[' expr ']'",
"expr : '@' expr",
"expr : expr INCDEC",
"expr : INCDEC expr",
"expr : SENSOR '(' expr ')'",
"expr : TYPE '(' expr ')'",
"expr : EVENT_SRC '(' expr ')'",
"expr : loc TASKID",
"expr : INDIRECT '(' expr ')' '[' expr ']'",
"expr : expr '?' expr ':' expr",
"expr : loc '&' ID",
"expr : loc '&' ID '[' expr ']'",
"expr : loc '*' ID",
"saveloc :",
"loc :",
"asm_list : asm_list ',' asm_item",
"asm_list : asm_item",
"asm_list :",
"asm_item : expr",
"asm_item : '$' expr",
"asm_item : '$' expr ':' expr",
"resource : RES expr ID '{' res_data '}'",
"res_data : res_data ',' res_byte",
"res_data : res_byte",
"res_data :",
"res_byte : expr",

};
#endif

int      yydebug;
int      yynerrs;

int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#endif
#endif

#define YYINITSTACKSIZE 200

typedef struct {
    unsigned stacksize;
    short    *s_base;
    short    *s_mark;
    short    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
} YYSTACKDATA;
/* variables for the parser stack */
static YYSTACKDATA yystack;
#line 404 "parse.y"



void yyerror(const char *msg)
{
	Error(kErr_Parser, msg).RaiseLex();
}

#line 1268 "y.tab.c"

#if YYDEBUG
#include <stdio.h>		/* needed for printf */
#endif

#include <stdlib.h>	/* needed for malloc, etc */
#include <string.h>	/* needed for memset */

/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
{
    int i;
    unsigned newsize;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = (int) (data->s_mark - data->s_base);
    newss = (short *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == 0)
        return -1;

    data->s_base = newss;
    data->s_mark = newss + i;

    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == 0)
        return -1;

    data->l_base = newvs;
    data->l_mark = newvs + i;

    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;
    return 0;
}

#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
{
    free(data->s_base);
    free(data->l_base);
    memset(data, 0, sizeof(*data));
}
#else
#define yyfreestack(data) /* nothing */
#endif

#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab

int
YYPARSE_DECL()
{
    int yym, yyn, yystate;
#if YYDEBUG
    const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;

#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
#endif

    if (yystack.s_base == NULL && yygrowstack(&yystack)) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
    yystate = 0;
    *yystack.s_mark = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = yyname[YYTRANSLATE(yychar)];
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
        {
            goto yyoverflow;
        }
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;

    yyerror("syntax error");

    goto yyerrlab;

yyerrlab:
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yystack.s_mark]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yystack.s_mark, yytable[yyn]);
#endif
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
                {
                    goto yyoverflow;
                }
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yystack.s_mark);
#endif
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
                --yystack.s_mark;
                --yystack.l_mark;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = yyname[YYTRANSLATE(yychar)];
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    if (yym)
        yyval = yystack.l_mark[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);
    switch (yyn)
    {
case 1:
#line 167 "parse.y"
	{ yyval.fInt = 0; }
break;
case 4:
#line 175 "parse.y"
	{ gProgram->AddGlobalDecls(yystack.l_mark[-1].fBlock); }
break;
case 5:
#line 176 "parse.y"
	{ yystack.l_mark[-1].fFragment->SetLocations(yystack.l_mark[-2].fLocation, yystack.l_mark[0].fLocation); }
break;
case 6:
#line 177 "parse.y"
	{ yystack.l_mark[-1].fFragment->SetLocations(yystack.l_mark[-2].fLocation, yystack.l_mark[0].fLocation); }
break;
case 7:
#line 178 "parse.y"
	{ EndSubWithParams(yystack.l_mark[-4].fFragment, yystack.l_mark[-2].fBlock, yystack.l_mark[-5].fLocation, yystack.l_mark[0].fLocation); }
break;
case 8:
#line 179 "parse.y"
	{ EndFunction(yystack.l_mark[-4].fFunction, yystack.l_mark[-2].fBlock, yystack.l_mark[-5].fLocation, yystack.l_mark[0].fLocation); }
break;
case 9:
#line 180 "parse.y"
	{ gProgram->AddResource(yystack.l_mark[-1].fResource); }
break;
case 10:
#line 184 "parse.y"
	{ yyval.fFunction = BeginFunction(yystack.l_mark[-1].fFunction, yystack.l_mark[-3].fSymbol, yystack.l_mark[-5].fBool); }
break;
case 11:
#line 187 "parse.y"
	{ yyval.fFragment = BeginSubWithParams(yystack.l_mark[-1].fFragment, yystack.l_mark[-3].fSymbol); }
break;
case 12:
#line 190 "parse.y"
	{ yyval.fBool = 0; }
break;
case 13:
#line 191 "parse.y"
	{ yyval.fBool = 1; }
break;
case 14:
#line 194 "parse.y"
	{ yyval.fFragment = new Fragment(true, yystack.l_mark[-3].fSymbol, yystack.l_mark[0].fStmt); }
break;
case 15:
#line 201 "parse.y"
	{ yyval.fFragment = new Fragment(false, yystack.l_mark[-3].fSymbol, yystack.l_mark[0].fStmt); }
break;
case 16:
#line 204 "parse.y"
	{ yyval.fFragment = yystack.l_mark[-3].fFragment; 	DefineSubArg(yyval.fFragment, yystack.l_mark[0].fSymbol, yystack.l_mark[-1].fInt); }
break;
case 17:
#line 205 "parse.y"
	{ yyval.fFragment = new Fragment(false); DefineSubArg(yyval.fFragment,yystack.l_mark[0].fSymbol,yystack.l_mark[-1].fInt); }
break;
case 19:
#line 209 "parse.y"
	{ yyval.fFunction = new FunctionDef(); }
break;
case 20:
#line 210 "parse.y"
	{ yyval.fFunction = new FunctionDef(); }
break;
case 21:
#line 213 "parse.y"
	{ yyval.fFunction = yystack.l_mark[-3].fFunction; 	DefineArg(yyval.fFunction, yystack.l_mark[0].fSymbol, yystack.l_mark[-1].fInt); }
break;
case 22:
#line 214 "parse.y"
	{ yyval.fFunction = new FunctionDef(); DefineArg(yyval.fFunction,yystack.l_mark[0].fSymbol,yystack.l_mark[-1].fInt); }
break;
case 23:
#line 217 "parse.y"
	{ yyval.fInt = FunctionDef::kIntegerArg; }
break;
case 24:
#line 218 "parse.y"
	{ yyval.fInt = FunctionDef::kConstantArg; }
break;
case 25:
#line 219 "parse.y"
	{ yyval.fInt = FunctionDef::kReferenceArg; }
break;
case 26:
#line 220 "parse.y"
	{ yyval.fInt = FunctionDef::kConstRefArg; }
break;
case 27:
#line 221 "parse.y"
	{ yyval.fInt = FunctionDef::kSensorArg; }
break;
case 28:
#line 222 "parse.y"
	{ yyval.fInt = FunctionDef::kPointerArg; }
break;
case 29:
#line 223 "parse.y"
	{ yyval.fInt = FunctionDef::kConstPtrArg; }
break;
case 30:
#line 227 "parse.y"
	{ yystack.l_mark[-2].fBlock->Add(yystack.l_mark[0].fStmt); yyval.fBlock = yystack.l_mark[-2].fBlock; }
break;
case 31:
#line 228 "parse.y"
	{ yyval.fBlock = new BlockStmt(); yyval.fBlock->Add(yystack.l_mark[0].fStmt); }
break;
case 32:
#line 231 "parse.y"
	{ yyval.fStmt = yystack.l_mark[0].fDeclareStmt; }
break;
case 33:
#line 232 "parse.y"
	{ yyval.fStmt = yystack.l_mark[-2].fDeclareStmt; yystack.l_mark[-2].fDeclareStmt->SetInitialValue(yystack.l_mark[0].fExpr); }
break;
case 34:
#line 235 "parse.y"
	{ yyval.fDeclareStmt = MakeDeclareStmt(yystack.l_mark[-1].fSymbol, yystack.l_mark[0].fLocation, 0, false, false); }
break;
case 35:
#line 236 "parse.y"
	{ yyval.fDeclareStmt = MakeDeclareStmt(yystack.l_mark[-4].fSymbol, yystack.l_mark[-3].fLocation, yystack.l_mark[-1].fExpr, false, false); }
break;
case 36:
#line 237 "parse.y"
	{ yyval.fDeclareStmt = MakeDeclareStmt(yystack.l_mark[-1].fSymbol, yystack.l_mark[0].fLocation, 0, true, false); }
break;
case 37:
#line 240 "parse.y"
	{ BeginScope(); }
break;
case 38:
#line 240 "parse.y"
	{ yyval.fStmt = EndScope(yystack.l_mark[-1].fBlock); }
break;
case 39:
#line 243 "parse.y"
	{ yystack.l_mark[-1].fBlock->Add(yystack.l_mark[0].fStmt); yyval.fBlock = yystack.l_mark[-1].fBlock; }
break;
case 40:
#line 244 "parse.y"
	{ yyval.fBlock = new BlockStmt(); }
break;
case 41:
#line 248 "parse.y"
	{ yyval.fStmt = new BlockStmt(); }
break;
case 43:
#line 250 "parse.y"
	{ yyval.fStmt = yystack.l_mark[-1].fCaseStmt; yystack.l_mark[-1].fCaseStmt->SetStmt(yystack.l_mark[0].fStmt); }
break;
case 44:
#line 251 "parse.y"
	{ yyval.fStmt = new LabelStmt(yystack.l_mark[-2].fSymbol, yystack.l_mark[-3].fLocation->GetLoc(), yystack.l_mark[0].fStmt); delete yystack.l_mark[-3].fLocation; }
break;
case 45:
#line 252 "parse.y"
	{  yyerrok; yyval.fStmt = new BlockStmt(); }
break;
case 47:
#line 254 "parse.y"
	{ yystack.l_mark[-1].fStmt->SetLocation(yystack.l_mark[0].fLocation); }
break;
case 48:
#line 259 "parse.y"
	{ yyval.fStmt = new WhileStmt(yystack.l_mark[-3].fExpr, yystack.l_mark[0].fStmt); yyval.fStmt->SetLocation(yystack.l_mark[-1].fLocation); }
break;
case 49:
#line 260 "parse.y"
	{ yyval.fStmt = new DoStmt(yystack.l_mark[-2].fExpr, yystack.l_mark[-5].fStmt); yyval.fStmt->SetLocation(yystack.l_mark[-6].fLocation); }
break;
case 50:
#line 261 "parse.y"
	{ yyval.fStmt = new RepeatStmt(yystack.l_mark[-3].fExpr, yystack.l_mark[0].fStmt); yyval.fStmt->SetLocation(yystack.l_mark[-1].fLocation); }
break;
case 51:
#line 262 "parse.y"
	{ yyval.fStmt = new SwitchStmt(yystack.l_mark[-3].fExpr, yystack.l_mark[0].fStmt); yyval.fStmt->SetLocation(yystack.l_mark[-1].fLocation); }
break;
case 52:
#line 263 "parse.y"
	{ yyval.fStmt = new IfStmt(yystack.l_mark[-3].fExpr, yystack.l_mark[0].fStmt); yyval.fStmt->SetLocation(yystack.l_mark[-1].fLocation); }
break;
case 53:
#line 264 "parse.y"
	{ yyval.fStmt = new IfStmt(yystack.l_mark[-5].fExpr, yystack.l_mark[-2].fStmt, yystack.l_mark[0].fStmt); yyval.fStmt->SetLocation(yystack.l_mark[-3].fLocation); }
break;
case 54:
#line 265 "parse.y"
	{ yyval.fStmt = new MonitorStmt(yystack.l_mark[-4].fExpr, yystack.l_mark[-1].fStmt, yystack.l_mark[0].fBlock, yystack.l_mark[-6].fLocation->GetLoc()); delete yystack.l_mark[-6].fLocation; yyval.fStmt->SetLocation(yystack.l_mark[-2].fLocation); }
break;
case 55:
#line 266 "parse.y"
	{ yyval.fStmt = MakeAcquireStmt(yystack.l_mark[-4].fExpr, yystack.l_mark[-1].fStmt, yystack.l_mark[0].fStmt, yystack.l_mark[-6].fLocation); yyval.fStmt->SetLocation(yystack.l_mark[-2].fLocation); }
break;
case 56:
#line 267 "parse.y"
	{ yyval.fStmt = new ForStmt(yystack.l_mark[-7].fStmt, yystack.l_mark[-5].fExpr, yystack.l_mark[-3].fStmt, yystack.l_mark[0].fStmt); yyval.fStmt->SetLocation(yystack.l_mark[-1].fLocation); }
break;
case 57:
#line 268 "parse.y"
	{ yyval.fStmt = new GotoStmt(yystack.l_mark[-2].fSymbol, sSavedLoc); }
break;
case 58:
#line 272 "parse.y"
	{ yyval.fStmt = yystack.l_mark[-2].fAsmStmt; }
break;
case 59:
#line 273 "parse.y"
	{ yyval.fStmt = new JumpStmt(yystack.l_mark[-1].fInt, sSavedLoc); }
break;
case 60:
#line 274 "parse.y"
	{ yyval.fStmt = new TaskStmt((UByte)yystack.l_mark[-3].fInt, yystack.l_mark[-1].fSymbol, sSavedLoc); }
break;
case 61:
#line 275 "parse.y"
	{ yyval.fStmt = yystack.l_mark[-2].fCall; yystack.l_mark[-2].fCall->SetName(yystack.l_mark[-4].fSymbol); yystack.l_mark[-2].fCall->SetLocation(yystack.l_mark[-5].fLocation->GetLoc()); delete yystack.l_mark[-5].fLocation; }
break;
case 62:
#line 276 "parse.y"
	{ yyval.fStmt = yystack.l_mark[-1].fBlock; }
break;
case 64:
#line 281 "parse.y"
	{ yyval.fStmt = new ExprStmt(yystack.l_mark[0].fExpr); }
break;
case 65:
#line 282 "parse.y"
	{ CheckLValue(yystack.l_mark[-2].fExpr); yyval.fStmt = MakeAssignStmt(yystack.l_mark[-2].fExpr, yystack.l_mark[-1].fInt, yystack.l_mark[0].fExpr); }
break;
case 66:
#line 283 "parse.y"
	{ CheckLValue(yystack.l_mark[-2].fExpr); yyval.fStmt = MakeAssign2Stmt(yystack.l_mark[-2].fExpr, yystack.l_mark[-1].fInt, yystack.l_mark[0].fExpr); }
break;
case 67:
#line 284 "parse.y"
	{ CheckLValue(yystack.l_mark[-2].fExpr); yyval.fStmt = new AssignStmt(yystack.l_mark[-2].fExpr, yystack.l_mark[0].fExpr); }
break;
case 69:
#line 289 "parse.y"
	{ yyval.fStmt = 0; }
break;
case 71:
#line 293 "parse.y"
	{ yyval.fExpr = 0; }
break;
case 73:
#line 298 "parse.y"
	{ yyval.fStmt = 0; }
break;
case 74:
#line 302 "parse.y"
	{ yystack.l_mark[-1].fBlock->Add(yystack.l_mark[0].fStmt); yyval.fBlock = yystack.l_mark[-1].fBlock; }
break;
case 75:
#line 303 "parse.y"
	{ yyval.fBlock =  new BlockStmt(); }
break;
case 76:
#line 306 "parse.y"
	{ yyval.fStmt = yystack.l_mark[0].fStmt; }
break;
case 77:
#line 307 "parse.y"
	{ yyval.fStmt = MakeCatchStmt(yystack.l_mark[-2].fExpr, yystack.l_mark[0].fStmt, yystack.l_mark[-4].fLocation); }
break;
case 78:
#line 311 "parse.y"
	{ yyval.fStmt = yystack.l_mark[0].fStmt; }
break;
case 79:
#line 314 "parse.y"
	{ yyval.fCaseStmt = MakeCaseStmt(yystack.l_mark[-1].fExpr, sSavedLoc); }
break;
case 80:
#line 315 "parse.y"
	{ yyval.fCaseStmt = new CaseStmt(CaseStmt::kDefaultValue, sSavedLoc); }
break;
case 82:
#line 319 "parse.y"
	{ yyval.fCall = new CallStmt(); }
break;
case 83:
#line 322 "parse.y"
	{ yyval.fCall = yystack.l_mark[-2].fCall; yyval.fCall->AddParam(yystack.l_mark[0].fExpr); }
break;
case 84:
#line 323 "parse.y"
	{ yyval.fCall = new CallStmt(); yyval.fCall->AddParam(yystack.l_mark[0].fExpr); }
break;
case 85:
#line 326 "parse.y"
	{ yyval.fExpr = new AtomExpr(kRCX_ConstantType, yystack.l_mark[-1].fInt, sSavedLoc); }
break;
case 86:
#line 327 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, '+', yystack.l_mark[0].fExpr); }
break;
case 87:
#line 328 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, '-', yystack.l_mark[0].fExpr); }
break;
case 88:
#line 329 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, '*', yystack.l_mark[0].fExpr); }
break;
case 89:
#line 330 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, '/', yystack.l_mark[0].fExpr); }
break;
case 90:
#line 331 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, '&', yystack.l_mark[0].fExpr); }
break;
case 91:
#line 332 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, '|', yystack.l_mark[0].fExpr); }
break;
case 92:
#line 333 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, '%', yystack.l_mark[0].fExpr); }
break;
case 93:
#line 334 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, LEFT, yystack.l_mark[0].fExpr); }
break;
case 94:
#line 335 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, RIGHT, yystack.l_mark[0].fExpr); }
break;
case 95:
#line 336 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(yystack.l_mark[-2].fExpr, '^', yystack.l_mark[0].fExpr); }
break;
case 96:
#line 337 "parse.y"
	{ yyval.fExpr = new RelExpr(yystack.l_mark[-2].fExpr, RelExpr::kEqualTo, yystack.l_mark[0].fExpr); }
break;
case 97:
#line 338 "parse.y"
	{ yyval.fExpr = new RelExpr(yystack.l_mark[-2].fExpr, RelExpr::kLessOrEqual, yystack.l_mark[0].fExpr); }
break;
case 98:
#line 339 "parse.y"
	{ yyval.fExpr = new RelExpr(yystack.l_mark[-2].fExpr, RelExpr::kGreaterOrEqual, yystack.l_mark[0].fExpr); }
break;
case 99:
#line 340 "parse.y"
	{ yyval.fExpr = new RelExpr(yystack.l_mark[-2].fExpr, RelExpr::kNotEqualTo, yystack.l_mark[0].fExpr); }
break;
case 100:
#line 341 "parse.y"
	{ yyval.fExpr = new RelExpr(yystack.l_mark[-2].fExpr, RelExpr::kLessThan, yystack.l_mark[0].fExpr); }
break;
case 101:
#line 342 "parse.y"
	{ yyval.fExpr = new RelExpr(yystack.l_mark[-2].fExpr, RelExpr::kGreaterThan, yystack.l_mark[0].fExpr); }
break;
case 102:
#line 343 "parse.y"
	{ yyval.fExpr = new AtomExpr(kRCX_ConstantType, 1, sSavedLoc); }
break;
case 103:
#line 344 "parse.y"
	{ yyval.fExpr = new AtomExpr(kRCX_ConstantType, 0, sSavedLoc); }
break;
case 104:
#line 345 "parse.y"
	{ yyval.fExpr = new NegateExpr(yystack.l_mark[0].fExpr); }
break;
case 105:
#line 346 "parse.y"
	{ yyval.fExpr = new LogicalExpr(yystack.l_mark[-2].fExpr, LogicalExpr::kLogicalAnd, yystack.l_mark[0].fExpr); }
break;
case 106:
#line 347 "parse.y"
	{ yyval.fExpr = new LogicalExpr(yystack.l_mark[-2].fExpr, LogicalExpr::kLogicalOr, yystack.l_mark[0].fExpr); }
break;
case 107:
#line 349 "parse.y"
	{ yyval.fExpr = MakeBinaryExpr(new AtomExpr(kRCX_ConstantType, 0, yystack.l_mark[0].fExpr->GetLoc()), '-', yystack.l_mark[0].fExpr); }
break;
case 108:
#line 350 "parse.y"
	{ yyval.fExpr = MakeUnaryExpr('~', yystack.l_mark[0].fExpr); }
break;
case 109:
#line 352 "parse.y"
	{ yyval.fExpr = MakeUnaryExpr(ABS, yystack.l_mark[-1].fExpr); }
break;
case 110:
#line 353 "parse.y"
	{ yyval.fExpr = MakeUnaryExpr(SIGN, yystack.l_mark[-1].fExpr); }
break;
case 111:
#line 355 "parse.y"
	{ yyval.fExpr = yystack.l_mark[-1].fExpr; }
break;
case 112:
#line 356 "parse.y"
	{ yyval.fExpr = MakeVarExpr(yystack.l_mark[0].fSymbol, yystack.l_mark[-1].fLocation); }
break;
case 113:
#line 357 "parse.y"
	{ yyval.fExpr = MakeArrayExpr(yystack.l_mark[-3].fSymbol, yystack.l_mark[-4].fLocation, yystack.l_mark[-1].fExpr); }
break;
case 114:
#line 358 "parse.y"
	{ yyval.fExpr = MakeValueExpr(yystack.l_mark[0].fExpr); }
break;
case 115:
#line 360 "parse.y"
	{ yyval.fExpr = MakeIncDecExpr(yystack.l_mark[-1].fExpr, yystack.l_mark[0].fInt, false, yystack.l_mark[-1].fExpr->GetLoc()); }
break;
case 116:
#line 361 "parse.y"
	{ yyval.fExpr = MakeIncDecExpr(yystack.l_mark[0].fExpr, yystack.l_mark[-1].fInt, true, yystack.l_mark[0].fExpr->GetLoc()); }
break;
case 117:
#line 363 "parse.y"
	{ yyval.fExpr = new SensorExpr(yystack.l_mark[-1].fExpr); }
break;
case 118:
#line 364 "parse.y"
	{ yyval.fExpr = new TypeExpr(yystack.l_mark[-1].fExpr); }
break;
case 119:
#line 365 "parse.y"
	{ yyval.fExpr = new EventSrcExpr(yystack.l_mark[-1].fExpr, gProgram->GetTarget()->fType); }
break;
case 120:
#line 366 "parse.y"
	{ yyval.fExpr = MakeTaskIdExpr(yystack.l_mark[-1].fLocation); }
break;
case 121:
#line 367 "parse.y"
	{ yyval.fExpr = MakeIndirectExpr(yystack.l_mark[-4].fExpr, yystack.l_mark[-1].fExpr); }
break;
case 122:
#line 368 "parse.y"
	{ yyval.fExpr = new TernaryExpr(yystack.l_mark[-4].fExpr, yystack.l_mark[-2].fExpr, yystack.l_mark[0].fExpr); }
break;
case 123:
#line 369 "parse.y"
	{ yyval.fExpr = MakeAddrOfExpr(yystack.l_mark[0].fSymbol, yystack.l_mark[-2].fLocation, (Expr *)0); }
break;
case 124:
#line 370 "parse.y"
	{ yyval.fExpr = MakeAddrOfExpr(yystack.l_mark[-3].fSymbol, yystack.l_mark[-5].fLocation, yystack.l_mark[-1].fExpr); }
break;
case 125:
#line 371 "parse.y"
	{ yyval.fExpr = MakeDerefExpr(yystack.l_mark[0].fSymbol, yystack.l_mark[-2].fLocation); }
break;
case 126:
#line 374 "parse.y"
	{ LexCurrentLocation(sSavedLoc); }
break;
case 127:
#line 377 "parse.y"
	{ yyval.fLocation = new LocationNode(); }
break;
case 128:
#line 380 "parse.y"
	{ yyval.fAsmStmt = yystack.l_mark[-2].fAsmStmt; yystack.l_mark[-2].fAsmStmt->Add(yystack.l_mark[0].fField); }
break;
case 129:
#line 381 "parse.y"
	{ yyval.fAsmStmt = new AsmStmt(); yyval.fAsmStmt->Add(yystack.l_mark[0].fField); }
break;
case 130:
#line 382 "parse.y"
	{ yyval.fAsmStmt = new AsmStmt(); }
break;
case 131:
#line 386 "parse.y"
	{ yyval.fField = MakeConstField(yystack.l_mark[0].fExpr); }
break;
case 132:
#line 387 "parse.y"
	{ yyval.fField = new EAField(yystack.l_mark[0].fExpr); }
break;
case 133:
#line 388 "parse.y"
	{ yyval.fField = new EAField(yystack.l_mark[-2].fExpr, GetConstantValue(yystack.l_mark[0].fExpr)); }
break;
case 134:
#line 392 "parse.y"
	{ yyval.fResource=yystack.l_mark[-1].fResource; yystack.l_mark[-1].fResource->SetInfo((RCX_ChunkType)GetConstantValue(yystack.l_mark[-4].fExpr), yystack.l_mark[-3].fSymbol); }
break;
case 135:
#line 395 "parse.y"
	{ yyval.fResource = yystack.l_mark[-2].fResource; yystack.l_mark[-2].fResource->Add(yystack.l_mark[0].fInt); }
break;
case 136:
#line 396 "parse.y"
	{ yyval.fResource = new Resource(); yyval.fResource->Add(yystack.l_mark[0].fInt); }
break;
case 137:
#line 397 "parse.y"
	{ yyval.fResource = new Resource(); }
break;
case 138:
#line 400 "parse.y"
	{ yyval.fInt = GetConstantValue(yystack.l_mark[0].fExpr); }
break;
#line 1982 "y.tab.c"
    }
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
        if (yychar < 0)
        {
            if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = yyname[YYTRANSLATE(yychar)];
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yystack.s_mark, yystate);
#endif
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
    {
        goto yyoverflow;
    }
    *++yystack.s_mark = (short) yystate;
    *++yystack.l_mark = yyval;
    goto yyloop;

yyoverflow:
    yyerror("yacc stack overflow");

yyabort:
    yyfreestack(&yystack);
    return (1);

yyaccept:
    yyfreestack(&yystack);
    return (0);
}
